{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","utils/reducers.js","utils/Store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","dispatch","useDispatch","cart","useSelector","state","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","products","currentCategory","useQuery","loading","data","useEffect","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","res","redirectToCheckout","sessionId","checkout","session","cartOpen","toggleCart","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useStoreContext","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","saveOrder","setTimeout","initialState","reducer","action","newState","createStore","compose","applyMiddleware","thunk","devToolsExtension","f","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.80fdce97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\nrequest.onsuccess = function(e) {\n  // save a reference of the database to the `db` variable\n  db = request.result;\n  // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n  tx = db.transaction(storeName, 'readwrite');\n  // save a reference to that object store\n  store = tx.objectStore(storeName);\n\n  // if there's any errors, let us know\n  db.onerror = function(e) {\n    console.log('error', e);\n  };\n\n  switch (method) {\n    case 'put':\n      store.put(object);\n      resolve(object);\n      break;\n    case 'get':\n      const all = store.getAll();\n      all.onsuccess = function() {\n        resolve(all.result);\n      };\n      break;\n    case 'delete':\n      store.delete(object._id);\n      break;\n    default:\n      console.log('No valid method');\n      break;\n  }\n\n  // when the transaction is complete, close the connection\n  tx.oncomplete = function() {\n    db.close();\n  };\n};\n\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport {idbPromise} from '../../utils/helpers';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const cart = useSelector(state => state.cart);\n  // const cartOpen = useSelector(state => state.cartOpen)\n  // const {cart} = state;\n\n   const addToCart = ()=> {\n    // find the cart item with the matching id\n  const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n  //if match call update\n   if(itemInCart) {\n     dispatch({\n       type: UPDATE_CART_QUANTITY,\n       _id: _id,\n       purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n     });\n       // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n    idbPromise('cart', 'put', {\n      ...itemInCart,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n   }else{\n    dispatch({\n      type: ADD_TO_CART,\n      product: {...item, purchaseQuantity: 1}\n    });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n    idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n   }\n   };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, {useEffect} from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport {idbPromise} from '../../utils/helpers';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport spinner from \"../../assets/spinner.gif\"\n\n\nfunction ProductList() {\n  // const [state, dispatch] = useStoreContext();\n \nconst products = useSelector(state => state.products);\n  const dispatch = useDispatch();\n  \n\n  const currentCategory = useSelector(state => state.currentCategory);\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  // const products = data?.products || [];\n useEffect(() => {\n  if (data) {\n    dispatch({\n      type: UPDATE_PRODUCTS,\n      products: data.products\n    });\n    // also save to idb\n    data.products.forEach((product) => {\n      idbPromise('products', 'put', product);\n    });\n    //else if loading not defined \n  }else if (!loading) {\n    // since ofline get all data from products store\n    idbPromise('products', 'get').then((products) => {\n      //use retrieved data to set offline global state\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: products\n      });\n    });\n  }\n}, [data,loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return products;\n    }\n\n    return products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;","import React, {useEffect} from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\n\nfunction CategoryMenu() {\n  //const [state, dispatch] = useStoreContext();\n\n  const categories = useSelector(state => state.categories)\n  const dispatch = useDispatch()\n  \n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport {idbPromise} from \"../../utils/helpers\"\nimport { useDispatch} from \"react-redux\";\n\nconst CartItem = ({ item }) => {\n\n    // const [, dispatch] = useStoreContext();\n    \n    const dispatch = useDispatch();\n     const removeFromCart = item => {\n         dispatch({\n             type: REMOVE_FROM_CART,\n             _id: item._id\n         });\n         idbPromise('cart', 'delete',{...item});\n     };\n\n     const onChange = (e) => {\n         const value = e.target.value;\n        //if to zero => delete\n        if (value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n            idbPromise('cart', 'delete', {...item});\n        // else update qnty\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n            idbPromise('cart', 'put', {...item, purchaseQuantity: parseInt(value)})\n        }\n     };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","  \nimport React,{useEffect, useState }from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\nimport {idbPromise} from '../../utils/helpers';\nimport { QUERY_CHECKOUT} from '../../utils/queries';\nimport {loadStripe} from '@stripe/stripe-js';\nimport { useLazyQuery} from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n\n    const [getCheckout, {data}] = useLazyQuery(QUERY_CHECKOUT);\n  // useEffect checking for change in data\n    useEffect(() => {\n      if(data) {\n        stripePromise.then((res) => {\n          res.redirectToCheckout({ sessionId: data.checkout.session});\n        });\n      }\n    },[data]);\n\n    // const [state, dispatch] = useStoreContext();\n    const dispatch = useDispatch();\n    const cart = useSelector(state => state.cart);\n    const cartOpen = useSelector(state => state.cartOpen)\n     useEffect(() => {\n       async function getCart(){\n         const cart = await idbPromise('cart', 'get');\n         dispatch({type: ADD_MULTIPLE_TO_CART, products: [...cart]});\n       };\n\n       if (!cart.length) {\n         getCart();\n       }\n     }, [cart.length,dispatch]);\n\n    function toggleCart() {\n        dispatch({type: TOGGLE_CART});\n    }\n\n    if (!cartOpen) {\n        //alternative if cart closed\n        return(\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span  role=\"img\"\n        aria-label=\"trash\">🛒</span>\n            </div>\n        );\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        cart.forEach(item => {\n          sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n      }\n\n      //handle stripe checkout\n      function submitCheckout() {\n        const productIds = [];\n      \n        cart.forEach((item) => {\n          for (let i = 0; i < item.purchaseQuantity; i++) {\n            productIds.push(item._id);\n          }\n        });\n        getCheckout({\n          variables: { products: productIds }\n        });\n      }\n  return (\n    <div className=\"cart\">\n    <div className=\"close\" onClick={toggleCart}>[close]</div>\n    <h2>Shopping Cart</h2>\n    {/* if items in cart */}\n    {cart.length ? (\n      <div>\n        {cart.map(item => (\n          <CartItem key={item._id} item={item} />\n        ))}\n        <div className=\"flex-row space-between\">\n          <strong>Total: ${calculateTotal()}</strong>\n          {\n            Auth.loggedIn() ?\n              <button onClick={submitCheckout}>\n                Checkout\n              </button>\n              :\n              <span>(log in to check out)</span>\n          }\n        </div>\n      </div>\n    ) : (\n        // else\n      <h3>\n        <span role=\"img\" aria-label=\"shocked\">\n          😱\n        </span>\n        You haven't added anything to your cart yet!\n      </h3>\n    )}\n  </div>\n  );\n};\n\nexport default Cart;","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n    <CategoryMenu />\n    <ProductList />\n    <Cart />\n  </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { useStoreContext } from \"../utils/GlobalState\";\n\n\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\n\nimport Cart from '../components/Cart';\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport { idbPromise } from \"../utils/helpers\";\n\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n  \n  const [currentProduct, setCurrentProduct] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  const { products, cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n  \n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button >\n            <button \n  disabled={!cart.find(p => p._id === currentProduct._id)} \n  onClick={removeFromCart}\n>\n  Remove from Cart\n</button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React,{useEffect} from 'react';\r\nimport {useMutation} from'@apollo/react-hooks';\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport {ADD_ORDER} from \"../utils/mutations\";\r\nimport {idbPromise} from \"../utils/helpers\";\r\n\r\n\r\nfunction Success() {\r\n\r\n    const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n    useEffect(() => {\r\n        async function saveOrder(){\r\n        const cart = await idbPromise('cart','get');\r\n        const products = cart.map(item => item._id)\r\n\r\n        if (products.length) {\r\n            //add order to history\r\n            const {data} = await addOrder({ variables: {products}});\r\n            const productData = data.addOrder.products;\r\n            //clear data from cart\r\n            productData.forEach((item) => {\r\n              idbPromise('cart','delete',item);\r\n            });\r\n        }\r\n        }\r\n        saveOrder();\r\n        setTimeout(function(){window.location.assign('/')}, 3000);\r\n\r\n    },[addOrder])\r\n    return (\r\n      <div>\r\n        <Jumbotron>\r\n          <h1>Success!</h1>\r\n          <h2>\r\n            Thank you for your purchase!\r\n          </h2>\r\n          <h2>\r\n            You will now be redirected to the homepage\r\n          </h2>\r\n        </Jumbotron>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Success;","import { useReducer } from 'react';\nimport { createStore } from 'redux';\n\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from \"./actions\";\n\n  //******REDUX TESTING *******\n  const initialState = {\n    products: [],\n    categories: {},\n    currentCategory: '',\n    cart: []\n  }\n//********REDUX TESTING *********\n\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n               case UPDATE_PRODUCTS:\n                   return {\n                       ...state,\n                       products:[...action.products],\n                   };\n                case UPDATE_CATEGORIES:\n                    return{\n                        ...state,\n                        categories: [...action.categories]\n                    };\n               case UPDATE_CURRENT_CATEGORY:\n                   return {\n                       ...state,\n                       currentCategory: action.currentCategory\n                   };\n               case ADD_TO_CART:\n                   return {\n                       ...state,\n                       cartOpen: true,\n                       cart: [...state.cart, action.product]\n                   };\n               case ADD_MULTIPLE_TO_CART:\n                   return {\n                       ...state,\n                       cart: [...state.cart,...action.products],\n                   };\n               case REMOVE_FROM_CART:\n                   let newState = state.cart.filter(product => {\n                       return product._id !== action._id;\n                   });\n      \n                   return {\n                       ...state,\n                       cartOpen: newState.length > 0,\n                       cart: newState\n                   };\n               case UPDATE_CART_QUANTITY:\n                      return {\n                        ...state,\n                        cartOpen: true,\n                        cart: state.cart.map(product => {\n                          if (action._id === product._id) {\n                            product.purchaseQuantity = action.purchaseQuantity;\n                          }\n                          return product;\n                        })\n                      };\n               case CLEAR_CART:\n                   return {\n                       ...state,\n                       cartOpen: false,\n                       cart: []\n                   };\n              \n              case TOGGLE_CART:\n                  return {\n                      ...state,\n                      cartOpen: !state.cartOpen\n                  };\n                   default: \n                   return state;\n            }\n}\n\n  /*\n  export const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products]\n        };\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories]\n        };\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n              ...state,\n              currentCategory: action.currentCategory\n            };\n            case ADD_TO_CART:\n              return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n              };\n\n              case ADD_MULTIPLE_TO_CART:\n                return {\n                  ...state,\n                  cart: [...state.cart, ...action.products],\n                };\n\n                case REMOVE_FROM_CART:\n                let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n                });\n                return {\n                  ...state,\n                  cartOpen: newState.length > 0,\n                  cart: newState\n                };\n\n                case UPDATE_CART_QUANTITY:\n  return {\n    ...state,\n    cartOpen: true,\n    cart: state.cart.map(product => {\n      if (action._id === product._id) {\n        product.purchaseQuantity = action.purchaseQuantity;\n      }\n      return product;\n    })\n  };\n\n  case CLEAR_CART:\n  return {\n    ...state,\n    cartOpen: false,\n    cart: []\n  };\n\n  case TOGGLE_CART:\n  return {\n    ...state,\n    cartOpen: !state.cartOpen\n  };\n\n\n  \n      default:\n        return state;\n    }\n  };\n*/\n  export function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }","\r\nimport { createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducers'\r\n\r\nconst store = createStore(reducer, compose(\r\n    applyMiddleware(thunk),\r\n    window.devToolsExtension ? window.devToolsExtension() : f => f\r\n))\r\n\r\nexport {store}","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport {Provider} from 'react-redux';\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\n// import {StoreProvider} from './utils/GlobalState';\nimport OrderHistory from \"./pages/OrderHistory\";\nimport Success from './pages/Success';\nimport {store} from './utils/Store'\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n          {/* <StoreProvider> */}\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route exact path=\"/success\" component={Success} />\n            <Route component={NoMatch} />\n          </Switch>\n          {/* </StoreProvider> */}\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}